# The kubernetes repo file has everything excluded to prevent automatic upgrades.
---
# Required system settings
- name: Copy etc/sysctl.d/90-kubernetes.conf
  ansible.builtin.copy:
    src: etc/sysctl.d/90-kubernetes.conf
    dest: /etc/sysctl.d/90-kubernetes.conf
    owner: root
    group: root
    mode: "0600"
- name: Set new sysctl settings
  ansible.builtin.command: sysctl --system
- name: Copy etc/modules-load.d/kubernetes.conf
  ansible.builtin.copy:
    src: etc/modules-load.d/kubernetes.conf
    dest: /etc/modules-load.d/kubernetes.conf
    owner: root
    group: root
    mode: "0644"
- name: Reload kernel modules
  ansible.builtin.systemd:
    state: restarted
    name: systemd-modules-load
- name: Copy kubernetes repo file
  ansible.builtin.copy:
    src: etc/yum.repos.d/kubernetes_v1.29.repo
    dest: /etc/yum.repos.d/
    owner: root
    group: root
    mode: "0664"
# Install software rpms
- name: Install kubernetes dependencies
  ansible.builtin.dnf:
    state: present
    name:
      - conntrack
      - container-selinux
      - ebtables
      - ethtool
      - iptables
      - socat
- name: Install kubernetes RPMs
  ansible.builtin.dnf:
    state: present
    disable_excludes: kubernetes
    name:
      - kubectl-1.29.5
      - kubeadm-1.29.5
      - kubelet-1.29.5
      - kubernetes-cni-1.3.0
      - cri-tools-1.29.0
# Disable swap
- name: Disable swap (when configured)
  when: cluster_disable_swap
  block:
    - name: Stop swap
      ansible.builtin.command:
        cmd: "swapoff -a"
    - name: Comment out swap lines in fstab
      ansible.builtin.shell:
        cmd: awk '/^[^#]/ { if ($3 == "swap") { printf "#%s\n", $0; next } } /.*/ { print $0 }' /etc/fstab > /tmp/fstab.new
    - name: Copy /tmp/fstab.new to /etc/fstab
      ansible.builtin.copy:
        src: /tmp/fstab.new
        dest: /etc/fstab
        remote_src: true
        backup: true
        owner: root
        group: root
        mode: "0644"
    - name: Delete /tmp/fstab.new
      ansible.builtin.file:
        state: absent
        path: /tmp/fstab.new
# Configure bash completion
- name: Create crictl bash completion
  ansible.builtin.shell: crictl completion bash > /etc/bash_completion.d/crictl
- name: Set /etc/bash_completion.d/crictl permissions
  ansible.builtin.file:
    state: file
    path: /etc/bash_completion.d/crictl
    owner: root
    group: root
    mode: "0664"
- name: Create kubeadm bash completion
  ansible.builtin.shell: kubeadm completion bash > /etc/bash_completion.d/kubeadm
- name: Set /etc/bash_completion.d/kubeadm permissions
  ansible.builtin.file:
    state: file
    path: /etc/bash_completion.d/kubeadm
    owner: root
    group: root
    mode: "0664"
- name: Create kubectl bash completion
  ansible.builtin.shell: kubectl completion bash > /etc/bash_completion.d/kubectl
- name: Set /etc/bash_completion.d/kubectl permissions
  ansible.builtin.file:
    state: file
    path: /etc/bash_completion.d/kubectl
    owner: root
    group: root
    mode: "0664"
- name: Create /root/kubeinit directory
  ansible.builtin.file:
    state: directory
    path: /root/kubeinit
    owner: root
    group: root
    mode: "0770"
- name: Check for opt_cni_bin.tar.gz
  ansible.builtin.stat:
    path: /root/kubeinit/opt_cni_bin.tar.gz
  register: cni_archive_stat
# Backup /opt/cni/bin because CNIs like to add and replace files here
- name: Backup archive /opt/cni/bin
  community.general.archive:
    path: /opt/cni/bin
    dest: /root/kubeinit/opt_cni_bin.tar.gz
    remove: false
    format: gz
    owner: root
    group: root
    mode: "0640"
  when: not cni_archive_stat.stat.exists
# Service configuration
- name: Enable kublet but don't start it
  ansible.builtin.systemd:
    state: stopped
    enabled: true
    name: kubelet
