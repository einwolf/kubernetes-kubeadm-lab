# Check default network type
- name: Check cluster_net_default
  when: cluster_net_default != "bridge_hl" and
        cluster_net_default != "bridge_dhcp" and
        cluster_net_default != "bridge_whereabouts" and
        cluster_net_default != "macvlan_dhcp" and
        cluster_net_default != "calico" and
        cluster_net_default != "cilium"
  block:
    - name: Print default network choice config error 1
      ansible.builtin.debug:
        msg: "cluster_net_default needs to be bridge_hl, bridge_dhcp, macvlan_dhcp, calico, or cilium"
    - name: Print default network choice config error 2
      ansible.builtin.fail:
        msg: "cluster_net_default choice is set to unknown value {{ cluster_net_default }}"
- name: Error if bridge_whereabouts is requested but whereabouts is not
  when: cluster_net_default == "bridge_whereabouts" and not cluster_install_whereabouts
  ansible.builtin.fail:
    msg: "bridge_whereabouts uses whereabouts so whereabouts must be installed"
- name: Error if cilium is requested but helm is not
  when: cluster_net_default == "cilium" and not cluster_install_helm
  ansible.builtin.fail:
    msg: "Cilium installs through helm so helm must be enabled"
# Required system settings
- name: Copy etc/sysctl.d/90-kubernetes.conf
  ansible.builtin.copy:
    src: etc/sysctl.d/90-kubernetes.conf
    dest: /etc/sysctl.d/90-kubernetes.conf
    owner: root
    group: root
    mode: "0600"
- name: Set new sysctl settings
  ansible.builtin.command: sysctl --system
- name: Copy etc/modules-load.d/kubernetes.conf
  ansible.builtin.copy:
    src: etc/modules-load.d/kubernetes.conf
    dest: /etc/modules-load.d/kubernetes.conf
    owner: root
    group: root
    mode: "0644"
- name: Reload kernel modules
  ansible.builtin.systemd:
    state: restarted
    name: systemd-modules-load
- name: Delete previous kubernetes repo file
  ansible.builtin.file:
    path: /etc/yum.repos.d/kubernetes_v1.29.repo
    state: absent
- name: Copy kubernetes repo file
  ansible.builtin.copy:
    src: etc/yum.repos.d/kubernetes_v1.30.repo
    dest: /etc/yum.repos.d/
    owner: root
    group: root
    mode: "0664"
# Install software rpms
- name: Install kubernetes dependencies
  # These should be locally available but enable internet.
  # One of the internet dependent repos will fail to refresh and cause an error.
  ansible.builtin.dnf:
    state: present
    name:
      - conntrack
      - container-selinux
      - ebtables
      - ethtool
      - iptables
      - socat
- name: Install kubernetes RPMs
  ansible.builtin.dnf:
    state: present
    disable_excludes: kubernetes
    name:
      - kubectl-1.30.4
      - kubeadm-1.30.4
      - kubelet-1.30.4
      - kubernetes-cni-1.4.0
      - cri-tools-1.30.1
# Disable swap
- name: Disable swap in fstab (if configured to)
  when: cluster_disable_swap
  block:
    - name: Stop swap
      ansible.builtin.command:
        cmd: "swapoff -a"
    - name: Comment out swap lines in fstab
      ansible.builtin.shell:
        cmd: awk '/^[^#]/ { if ($3 == "swap") { printf "#%s\n", $0; next } } /.*/ { print $0 }' /etc/fstab > /tmp/fstab.new
    - name: Copy /tmp/fstab.new to /etc/fstab
      ansible.builtin.copy:
        src: /tmp/fstab.new
        dest: /etc/fstab
        remote_src: true
        backup: true
        owner: root
        group: root
        mode: "0644"
    - name: Delete /tmp/fstab.new
      ansible.builtin.file:
        state: absent
        path: /tmp/fstab.new
# Configure bash completion
- name: Create crictl bash completion
  ansible.builtin.shell: crictl completion bash > /etc/bash_completion.d/crictl
- name: Set /etc/bash_completion.d/crictl permissions
  ansible.builtin.file:
    state: file
    path: /etc/bash_completion.d/crictl
    owner: root
    group: root
    mode: "0664"
- name: Create kubeadm bash completion
  ansible.builtin.shell: kubeadm completion bash > /etc/bash_completion.d/kubeadm
- name: Set /etc/bash_completion.d/kubeadm permissions
  ansible.builtin.file:
    state: file
    path: /etc/bash_completion.d/kubeadm
    owner: root
    group: root
    mode: "0664"
- name: Create kubectl bash completion
  ansible.builtin.shell: kubectl completion bash > /etc/bash_completion.d/kubectl
- name: Set /etc/bash_completion.d/kubectl permissions
  ansible.builtin.file:
    state: file
    path: /etc/bash_completion.d/kubectl
    owner: root
    group: root
    mode: "0664"
- name: Create /root/kubeinit directory
  ansible.builtin.file:
    state: directory
    path: /root/kubeinit
    owner: root
    group: root
    mode: "0770"
- name: Check for opt_cni_bin.tar.gz
  ansible.builtin.stat:
    path: /root/kubeinit/opt_cni_bin.tar.gz
  register: cni_archive_stat
# Backup /opt/cni/bin because CNIs like to add and replace files here
- name: Backup archive /opt/cni/bin
  community.general.archive:
    path: /opt/cni/bin
    dest: /root/kubeinit/opt_cni_bin.tar.gz
    remove: false
    format: gz
    owner: root
    group: root
    mode: "0640"
  when: not cni_archive_stat.stat.exists
# Service configuration
- name: Enable kublet but don't start it
  ansible.builtin.systemd:
    state: stopped
    enabled: true
    name: kubelet
# Host-local is only good for one node clusters
- name: Use default bridge host-local
  when: cluster_net_default == "bridge_hl"
  block:
    - name: Copy default bridge IPAM host-local CNI config
      ansible.builtin.copy:
        src: etc/cni/net.d/20-ipv4-bridge-hl.conflist
        dest: /etc/cni/net.d/20-ipv4-bridge-hl.conflist
        owner: root
        group: root
        mode: "0644"
- name: Use default bridge DHCP
  when: cluster_net_default == "bridge_dhcp"
  block:
    - name: Copy default bridge IPAM DHCP CNI config
      ansible.builtin.copy:
        src: etc/cni/net.d/20-ipv4-bridge-dhcp.conflist
        dest: /etc/cni/net.d/20-ipv4-bridge-dhcp.conflist
        owner: root
        group: root
        mode: "0644"
    - name: Copy IPAM DHCP CNI cni-dhcp.service
      ansible.builtin.copy:
        src: etc/systemd/system/cni-dhcp.service
        dest: /etc/systemd/system/cni-dhcp.service
        owner: root
        group: root
        mode: "0644"
    - name: Copy IPAM DHCP CNI cni-dhcp.socket
      ansible.builtin.copy:
        src: etc/systemd/system/cni-dhcp.socket
        dest: /etc/systemd/system/cni-dhcp.socket
        owner: root
        group: root
        mode: "0644"
    - name: Enable cni-dhcp.service
      ansible.builtin.systemd:
        daemon_reload: true
        name: cni-dhcp.service
        enabled: true
        state: restarted
    - name: Enable cni-dhcp.socket
      ansible.builtin.systemd:
        daemon_reload: true
        name: cni-dhcp.socket
        enabled: true
        state: restarted
- name: Use default bridge whereabouts
  when: cluster_net_default == "bridge_whereabouts"
  block:
    - name: Copy default bridge IPAM whereabouts CNI config
      ansible.builtin.copy:
        src: etc/cni/net.d/20-ipv4-bridge-whereabouts.conflist
        dest: /etc/cni/net.d/20-ipv4-bridge-whereabouts.conflist
        owner: root
        group: root
        mode: "0644"
- name: Use default macvlan DHCP
  when: cluster_net_default == "macvlan_dhcp"
  block:
    - name: Copy default macvlan IPAM DHCP CNI config
      ansible.builtin.copy:
        src: etc/cni/net.d/20-ipv4-macvlan-dhcp.conflist
        dest: /etc/cni/net.d/20-ipv4-macvlan-dhcp.conflist
        owner: root
        group: root
        mode: "0644"
    - name: Copy IPAM DHCP CNI cni-dhcp.service
      ansible.builtin.copy:
        src: etc/systemd/system/cni-dhcp.service
        dest: /etc/systemd/system/cni-dhcp.service
        owner: root
        group: root
        mode: "0644"
    - name: Copy IPAM DHCP CNI cni-dhcp.socket
      ansible.builtin.copy:
        src: etc/systemd/system/cni-dhcp.socket
        dest: /etc/systemd/system/cni-dhcp.socket
        owner: root
        group: root
        mode: "0644"
    - name: Enable cni-dhcp.service
      ansible.builtin.systemd:
        daemon_reload: true
        name: cni-dhcp.service
        enabled: true
        state: restarted
    - name: Enable cni-dhcp.socket
      ansible.builtin.systemd:
        daemon_reload: true
        name: cni-dhcp.socket
        enabled: true
        state: restarted
- name: Use default CNI calico
  when: cluster_net_default == "calico"
  block:
    - name: Copy default calico CNI config
      ansible.builtin.debug:
        msg: "The calico-node container will install a default CNI file"
- name: Use default CNI cillium
  when: cluster_net_default == "cillium"
  block:
    - name: Copy default cillium CNI config
      ansible.builtin.debug:
        msg: "The cillium will install a default CNI file"
